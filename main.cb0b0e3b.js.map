{"version":3,"sources":["scripts/main.js"],"names":["firstMove","board","startTouchX","startTouchY","gameField","document","querySelector","button","messageLose","messageWin","messageStart","gameScore","score","size","newGame","addEventListener","initBoard","addTile","gameStatus","classList","contains","restartGame","replace","textContent","remove","add","Array","fill","map","isEmpty","some","row","includes","rows","Math","floor","random","colls","randomNumber","updateBoard","r","c","tileNum","tile","cells","value","window","onload","win","canMove","removeZero","filter","num","move","newRow","length","push","moveLeft","moveRight","reverse","moveUp","moveDown","arraysEqual","arr1","arr2","changeStartRestart","touchStart","e","firstTouch","touches","clientX","clientY","touchMove","prevBoard","endTouchX","endTouchY","deltaX","deltaY","abs","key","keyCode"],"mappings":"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","file":"main.cb0b0e3b.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst gameField = document.querySelector('.game-field');\nconst button = document.querySelector('.button');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst messageStart = document.querySelector('.message-start');\nconst gameScore = document.querySelector('.game-score');\nlet firstMove;\nlet score = 0;\nconst size = 4;\nlet board;\nlet startTouchX,\n  startTouchY;\n\nwindow.onload = function() {\n  newGame();\n};\n\nfunction newGame() {\n  button.addEventListener('click', () => {\n    board = initBoard(size);\n    addTile();\n    addTile();\n    gameStatus();\n    firstMove = true;\n\n    if (button.classList.contains('restart')) {\n      restartGame();\n    }\n  });\n}\n\nfunction restartGame() {\n  board = initBoard(size);\n\n  button.classList.replace('restart', 'start');\n  button.textContent = 'Start';\n  messageStart.classList.remove('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  score = 0;\n  gameScore.textContent = score;\n\n  addTile();\n  addTile();\n  gameStatus();\n}\n\nfunction initBoard(size) {\n  return Array(size).fill(0).map(() => Array(size).fill(0));\n}\n\nfunction isEmpty(board) {\n  return board.some(row => row.includes(0));\n};\n\nfunction addTile() {\n  if (!isEmpty(board)) {\n    return;\n  };\n\n  const rows = Math.floor(Math.random() * size);\n  const colls = Math.floor(Math.random() * size);\n\n  if (board[rows][colls] === 0) {\n    board[rows][colls] = randomNumber();\n    updateBoard();\n  } else {\n    addTile();\n  }\n\n  gameStatus();\n};\n\nfunction updateBoard() {\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      const tileNum = board[r][c];\n      const tile = gameField.rows[r].cells[c];\n\n      tile.textContent = '';\n      tile.classList.value = '';\n      tile.classList.add('field-cell');\n\n      if (tileNum > 0) {\n        tile.textContent = tileNum;\n        tile.classList.add(`field-cell--${tileNum}`);\n\n        if (tileNum >= 8192) {\n          tile.classList.add(`field-cell--8192`);\n        }\n      }\n    }\n  }\n}\n\nconst randomNumber = () => {\n  return Math.random() < 0.9 ? 2 : 4;\n};\n\nfunction gameStatus() {\n  if (win(board)) {\n    messageWin.classList.remove('hidden');\n  }\n\n  if (!canMove()) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction win(board) {\n  return board.some(row => row.includes(2048));\n}\n\nfunction removeZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction move(row) {\n  let newRow = removeZero(row);\n\n  for (let r = 0; r < newRow.length - 1; r++) {\n    if (newRow[r] === newRow[r + 1]) {\n      newRow[r] *= 2;\n      newRow[r + 1] = 0;\n      score += newRow[r];\n      gameScore.textContent = score;\n    }\n  }\n\n  newRow = removeZero(newRow);\n\n  while (newRow.length < size) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction canMove() {\n  if (isEmpty(board)) {\n    return true;\n  }\n\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size - 1; c++) {\n      const tile = board[r][c];\n      const nextTile = board[r][c + 1];\n\n      if (tile === nextTile) {\n        return true;\n      }\n    }\n  }\n\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size - 1; c++) {\n      const tile = board[c][r];\n      const nextTile = board[c + 1][r];\n\n      if (tile === nextTile) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction moveLeft() {\n  for (let r = 0; r < size; r++) {\n    let row = board[r];\n\n    row = move(row);\n    board[r] = row;\n  }\n\n  updateBoard();\n}\n\nfunction moveRight() {\n  for (let r = 0; r < size; r++) {\n    let row = board[r];\n\n    row.reverse();\n\n    row = move(row);\n\n    board[r] = row.reverse();\n  }\n\n  updateBoard();\n}\n\nfunction moveUp() {\n  for (let c = 0; c < size; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row = move(row);\n\n    for (let r = 0; r < size; r++) {\n      board[r][c] = row[r];\n    }\n  }\n\n  updateBoard();\n}\n\nfunction moveDown() {\n  for (let c = 0; c < size; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row.reverse();\n\n    row = move(row);\n\n    row.reverse();\n\n    for (let r = 0; r < size; r++) {\n      board[r][c] = row[r];\n    }\n  }\n\n  updateBoard();\n}\n\nfunction arraysEqual(arr1, arr2) {\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      if (arr1[r][c] !== arr2[r][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction changeStartRestart() {\n  button.classList.replace('start', 'restart');\n  button.textContent = 'Restart';\n  messageStart.classList.add('hidden');\n}\n\ndocument.addEventListener('touchstart', touchStart, false);\ndocument.addEventListener('touchmove', touchMove, false);\n\nfunction touchStart(e) {\n  const firstTouch = e.touches[0];\n\n  startTouchX = firstTouch.clientX;\n  startTouchY = firstTouch.clientY;\n}\n\nfunction touchMove(e) {\n  if (!startTouchX || !startTouchY) {\n    return false;\n  }\n\n  const prevBoard = board.map((row) => [...row]);\n\n  const endTouchX = e.touches[0].clientX;\n  const endTouchY = e.touches[0].clientY;\n  const deltaX = endTouchX - startTouchX;\n  const deltaY = endTouchY - startTouchY;\n\n  if (Math.abs(deltaX) > Math.abs(deltaY)) {\n    if (Math.abs(deltaX) > 50) {\n      if (deltaX < 0) {\n        moveLeft();\n      } else {\n        moveRight();\n      }\n      startTouchX = null;\n      startTouchY = null;\n    }\n  } else {\n    if (Math.abs(deltaY) > 50) {\n      if (deltaY < 0) {\n        moveUp();\n      } else {\n        moveDown();\n      }\n      startTouchX = null;\n      startTouchY = null;\n    }\n  }\n\n  if (!arraysEqual(board, prevBoard)) {\n    if (firstMove) {\n      changeStartRestart();\n      firstMove = false;\n    }\n    addTile();\n  }\n}\n\ndocument.addEventListener('keyup', e => {\n  const key = e.keyCode;\n\n  const prevBoard = board.map((row) => [...row]);\n\n  switch (key) {\n    case 37:\n    case 65:\n      moveLeft();\n      break;\n    case 39:\n    case 68:\n      moveRight();\n      break;\n    case 38:\n    case 87:\n      moveUp();\n      break;\n    case 40:\n    case 83:\n      moveDown();\n      break;\n  }\n\n  if (!arraysEqual(board, prevBoard)) {\n    if (firstMove) {\n      changeStartRestart();\n      firstMove = false;\n    }\n    addTile();\n  }\n});\n"]}